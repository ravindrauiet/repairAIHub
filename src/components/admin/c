import React, { useState, useEffect } from 'react';
import * as firestoreService from '../../services/firestoreService';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Add some styling for debug information
const debugStyles = {
  debugInfo: {
    backgroundColor: '#f8f9fa',
    border: '1px solid #ddd',
    borderRadius: '4px',
    padding: '10px',
    maxHeight: '200px',
    overflowY: 'auto',
    fontSize: '12px',
    whiteSpace: 'pre-wrap',
    marginBottom: '15px'
  },
  debugSection: {
    marginTop: '20px',
    padding: '20px',
    backgroundColor: '#f0f0f0',
    borderRadius: '4px'
  }
};

const BookingDevicesManager = () => {
  // State variables - same pattern as BookingDeviceSelector
  const [serviceTypes, setServiceTypes] = useState([]);
  const [selectedServiceType, setSelectedServiceType] = useState('mobile-repair'); // Default to mobile-repair
  const [brands, setBrands] = useState([]);
  const [models, setModels] = useState([]);
  const [selectedBrand, setSelectedBrand] = useState('');
  const [selectedModel, setSelectedModel] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [saving, setSaving] = useState(false);
  
  // New brand and model form
  const [newBrand, setNewBrand] = useState({ id: '', name: '' });
  const [newModel, setNewModel] = useState({ id: '', name: '' });
  
  // Load service types on mount
  useEffect(() => {
    const loadServiceTypes = async () => {
      try {
        const categories = await firestoreService.getAllCategories();
        console.log(categories);
        const types = categories
          .filter(cat => cat.id.includes('repair') || cat.name.toLowerCase().includes('repair'))
          .map(cat => ({
            id: cat.id,
            name: cat.name
          }));
        
        // Ensure mobile-repair is included
        if (!types.some(t => t.id === 'mobile-repair')) {
          types.push({ id: 'mobile-repair', name: 'Mobile Repair' });
        }
        
        setServiceTypes(types);
      } catch (err) {
        console.error('Error loading service types:', err);
        // Add mobile-repair as fallback
        setServiceTypes([{ id: 'mobile-repair', name: 'Mobile Repair' }]);
      }
    };
    
    loadServiceTypes();
  }, []);
  
  // Fetch brands when service type changes - EXACTLY like BookingDeviceSelector
  useEffect(() => {
    const fetchBrands = async () => {
      if (!selectedServiceType) return;
      
      try {
        setLoading(true);
        setError(null);
        
        // Get booking device data for this service category
        const bookingDevice = await firestoreService.getBookingDevice(selectedServiceType);
        
        if (bookingDevice && bookingDevice.brands) {
          setBrands(bookingDevice.brands);
        } else {
          // If no data is found, set empty array and show an error
          setBrands([]);
          setError(`No device data found for ${selectedServiceType}. Please try another service type.`);
        }
        
        // Reset selections when service type changes
        setSelectedBrand('');
        setSelectedModel('');
        setModels([]);
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching brands:', err);
        setError('Failed to load device brands. Please try again later.');
        setBrands([]);
        setLoading(false);
      }
    };
    
    fetchBrands();
  }, [selectedServiceType]);
  
  // Fetch models when a brand is selected - EXACTLY like BookingDeviceSelector
  useEffect(() => {
    const fetchModels = async () => {
      if (!selectedBrand || !selectedServiceType) {
        setModels([]);
        return;
      }
      
      try {
        setLoading(true);
        setError(null);
        
        // Get models for this brand from Firestore
        const modelsData = await firestoreService.getBookingDeviceModels(selectedServiceType, selectedBrand);
        
        if (modelsData) {
          setModels(modelsData);
        } else {
          setModels([]);
          setError(`No models found for ${selectedBrand}. Please try another brand.`);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching models:', err);
        setError('Failed to load device models. Please try again later.');
        setModels([]);
        setLoading(false);
      }
    };
    
    fetchModels();
  }, [selectedBrand, selectedServiceType]);
  
  // Handle service type change
  const handleServiceTypeChange = (e) => {
    setSelectedServiceType(e.target.value);
  };
  
  // Handle brand selection change - EXACTLY like BookingDeviceSelector
  const handleBrandChange = (e) => {
    const brandId = e.target.value;
    setSelectedBrand(brandId);
    setSelectedModel('');
  };
  
  // Handle adding a new brand
  const handleAddBrand = async () => {
    if (!newBrand.id || !newBrand.name) {
      toast.error('Brand ID and name are required');
      return;
    }
    
    // Check if ID already exists
    if (brands.some(brand => brand.id === newBrand.id)) {
      toast.error('Brand ID already exists');
      return;
    }
    
    try {
      setSaving(true);
      
      // Create updated brands array
      const updatedBrands = [...brands, newBrand];
      
      // Update the booking device document
      await firestoreService.saveBookingDevice(selectedServiceType, {
        type: selectedServiceType,
        brands: updatedBrands
      });
      
      // Update the local state
      setBrands(updatedBrands);
      setSelectedBrand(newBrand.id);
      setNewBrand({ id: '', name: '' });
      
      toast.success('Brand added successfully');
      
      // Initialize empty models for this brand
      await firestoreService.saveBookingDeviceModels(selectedServiceType, newBrand.id, []);
      
      setSaving(false);
    } catch (err) {
      console.error('Error adding brand:', err);
      toast.error('Failed to add brand');
      setSaving(false);
    }
  };
  
  // Handle adding a new model
  const handleAddModel = async () => {
    if (!newModel.id || !newModel.name) {
      toast.error('Model ID and name are required');
      return;
    }
    
    // Check if ID already exists
    if (models.some(model => model.id === newModel.id)) {
      toast.error('Model ID already exists');
      return;
    }
    
    try {
      setSaving(true);
      
      // Create updated models array
      const updatedModels = [...models, newModel];
      
      // Update the booking device models document
      await firestoreService.saveBookingDeviceModels(selectedServiceType, selectedBrand, updatedModels);
      
      // Update the local state
      setModels(updatedModels);
      setNewModel({ id: '', name: '' });
      
      toast.success('Model added successfully');
      setSaving(false);
    } catch (err) {
      console.error('Error adding model:', err);
      toast.error('Failed to add model');
      setSaving(false);
    }
  };
  
  // Handle deleting a brand
  const handleDeleteBrand = async (brandId) => {
    if (window.confirm('Are you sure you want to delete this brand? All models associated with this brand will also be deleted.')) {
      try {
        setSaving(true);
        
        // Create updated brands array
        const updatedBrands = brands.filter(brand => brand.id !== brandId);
        
        // Update the booking device document
        await firestoreService.saveBookingDevice(selectedServiceType, {
          type: selectedServiceType,
          brands: updatedBrands
        });
        
        // Delete the booking device models document for this brand
        await firestoreService.deleteBookingDeviceModels(selectedServiceType, brandId);
        
        // Update the local state
        setBrands(updatedBrands);
        
        // If the deleted brand was selected, reset selection
        if (selectedBrand === brandId) {
          setSelectedBrand('');
          setSelectedModel('');
          setModels([]);
        }
        
        toast.success('Brand deleted successfully');
        setSaving(false);
      } catch (err) {
        console.error('Error deleting brand:', err);
        toast.error('Failed to delete brand');
        setSaving(false);
      }
    }
  };
  
  // Handle deleting a model
  const handleDeleteModel = async (modelId) => {
    if (window.confirm('Are you sure you want to delete this model?')) {
      try {
        setSaving(true);
        
        // Create updated models array
        const updatedModels = models.filter(model => model.id !== modelId);
        
        // Update the booking device models document
        await firestoreService.saveBookingDeviceModels(selectedServiceType, selectedBrand, updatedModels);
        
        // Update the local state
        setModels(updatedModels);
        
        toast.success('Model deleted successfully');
        setSaving(false);
      } catch (err) {
        console.error('Error deleting model:', err);
        toast.error('Failed to delete model');
        setSaving(false);
      }
    }
  };
  
  // Loading indicator
  if (loading && !brands.length) {
    return (
      <div className="admin-loading">
        <div className="spinner"></div>
        <p>Loading booking devices...</p>
      </div>
    );
  }
  
  return (
    <div className="admin-page-container">
      <ToastContainer position="top-right" autoClose={3000} />
      
      <div className="admin-page-header">
        <h2>Booking Devices Manager</h2>
        <p className="admin-page-subtitle">
          Manage device brands and models available for booking repair services
        </p>
      </div>
      
      <div className="admin-content-wrapper">
        {error && (
          <div className="admin-alert admin-alert-danger mb-4">
            {error}
          </div>
        )}
        
        <div className="admin-card mb-4">
          <div className="admin-card-header">
            <h3 className="admin-card-title">Select Service Type</h3>
          </div>
          <div className="admin-card-body">
            <div className="admin-form-group">
              <label>Service Type</label>
              <select
                value={selectedServiceType}
                onChange={handleServiceTypeChange}
                className="admin-select"
                disabled={loading}
              >
                {serviceTypes.map(type => (
                  <option key={type.id} value={type.id}>
                    {type.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
        
        <div className="admin-row">
          <div className="admin-col-6">
            <div className="admin-card mb-4">
              <div className="admin-card-header">
                <h3 className="admin-card-title">Manage Brands</h3>
              </div>
              <div className="admin-card-body">
                {/* Brand selector - same as BookingDeviceSelector */}
                <div className="admin-form-group mb-4">
                  <label htmlFor="brandSelector">Select Brand</label>
                  <select
                    id="brandSelector"
                    value={selectedBrand}
                    onChange={handleBrandChange}
                    className="admin-select"
                    disabled={brands.length === 0 || loading}
                  >
                    <option value="">Choose a brand</option>
                    {brands.map((brand) => (
                      <option key={brand.id} value={brand.id}>
                        {brand.name}
                      </option>
                    ))}
                  </select>
                  {brands.length === 0 && !loading && (
                    <p className="admin-help-text">No brands available for this service type.</p>
                  )}
                </div>
                
                <div className="admin-form-divider">Add New Brand</div>
                
                <div className="admin-form-row">
                  <div className="admin-form-group">
                    <label>Brand ID</label>
                    <input
                      type="text"
                      value={newBrand.id}
                      onChange={(e) => setNewBrand({...newBrand, id: e.target.value})}
                      placeholder="e.g., samsung-mobile"
                      className="admin-input"
                    />
                  </div>
                  <div className="admin-form-group">
                    <label>Brand Name</label>
                    <input
                      type="text"
                      value={newBrand.name}
                      onChange={(e) => setNewBrand({...newBrand, name: e.target.value})}
                      placeholder="e.g., Samsung"
                      className="admin-input"
                    />
                  </div>
                </div>
                
                <div className="admin-form-row mt-2">
                  <button
                    className="admin-btn admin-btn-primary"
                    onClick={handleAddBrand}
                    disabled={saving || !newBrand.id || !newBrand.name}
                  >
                    {saving ? 'Adding...' : 'Add Brand'}
                  </button>
                </div>
                
                {brands.length > 0 && (
                  <div className="admin-table-container mt-4">
                    <div className="admin-form-divider">Brand List</div>
                    <table className="admin-table">
                      <thead>
                        <tr>
                          <th>ID</th>
                          <th>Name</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {brands.map(brand => (
                          <tr key={brand.id} className={selectedBrand === brand.id ? 'selected-row' : ''}>
                            <td>{brand.id}</td>
                            <td>{brand.name}</td>
                            <td>
                              <div className="admin-actions">
                                <button
                                  className="admin-btn admin-btn-sm admin-btn-danger"
                                  onClick={() => handleDeleteBrand(brand.id)}
                                  disabled={saving}
                                >
                                  <i className="fas fa-trash"></i> Delete
                                </button>
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <div className="admin-col-6">
            <div className="admin-card mb-4">
              <div className="admin-card-header">
                <h3 className="admin-card-title">
                  Manage Models
                  {selectedBrand && brands.length > 0 && (
                    <span> for {brands.find(b => b.id === selectedBrand)?.name}</span>
                  )}
                </h3>
              </div>
              <div className="admin-card-body">
                {!selectedBrand ? (
                  <div className="admin-alert admin-alert-info">
                    Please select a brand to manage its models
                  </div>
                ) : (
                  <>
                    <div className="admin-form-divider">Add New Model</div>
                    <div className="admin-form-row">
                      <div className="admin-form-group">
                        <label>Model ID</label>
                        <input
                          type="text"
                          value={newModel.id}
                          onChange={(e) => setNewModel({...newModel, id: e.target.value})}
                          placeholder="e.g., galaxy-s24-ultra"
                          className="admin-input"
                        />
                      </div>
                      <div className="admin-form-group">
                        <label>Model Name</label>
                        <input
                          type="text"
                          value={newModel.name}
                          onChange={(e) => setNewModel({...newModel, name: e.target.value})}
                          placeholder="e.g., Galaxy S24 Ultra"
                          className="admin-input"
                        />
                      </div>
                    </div>
                    
                    <div className="admin-form-row mt-2">
                      <button
                        className="admin-btn admin-btn-primary"
                        onClick={handleAddModel}
                        disabled={saving || !newModel.id || !newModel.name}
                      >
                        {saving ? 'Adding...' : 'Add Model'}
                      </button>
                    </div>
                    
                    {models.length > 0 ? (
                      <div className="admin-table-container mt-4">
                        <div className="admin-form-divider">Model List</div>
                        <table className="admin-table">
                          <thead>
                            <tr>
                              <th>ID</th>
                              <th>Name</th>
                              <th>Actions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {models.map(model => (
                              <tr key={model.id}>
                                <td>{model.id}</td>
                                <td>{model.name}</td>
                                <td>
                                  <div className="admin-actions">
                                    <button
                                      className="admin-btn admin-btn-sm admin-btn-danger"
                                      onClick={() => handleDeleteModel(model.id)}
                                      disabled={saving}
                                    >
                                      <i className="fas fa-trash"></i> Delete
                                    </button>
                                  </div>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    ) : (
                      <div className="admin-alert admin-alert-info mt-4">
                        No models found for this brand. Add a model to get started.
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
        
        <div className="admin-card mb-4">
          <div className="admin-card-header">
            <h3 className="admin-card-title">Direct Actions</h3>
          </div>
          <div className="admin-card-body">
            <button
              className="admin-btn admin-btn-primary"
              onClick={() => {
                setSelectedServiceType('mobile-repair');
                // The useEffect will handle loading the brands
              }}
              disabled={loading || saving}
            >
              Load Mobile Repair
            </button>
            
            <button
              className="admin-btn admin-btn-secondary ml-2"
              onClick={() => {
                setSelectedServiceType('mobile-repair');
                // The first useEffect will handle loading the brands
                // Then we manually set the selected brand
                setTimeout(() => {
                  setSelectedBrand('oppo-mobile');
                  // The second useEffect will handle loading the models
                }, 500);
              }}
              disabled={loading || saving}
            >
              Load Oppo Mobile
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookingDevicesManager; 